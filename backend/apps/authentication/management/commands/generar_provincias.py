"""
Comando Django para generar todas las provincias espa√±olas en la base de datos
"""
from django.core.management.base import BaseCommand
from apps.authentication.models import Provincia

PROVINCIAS_ESPA√ëA = [
    ('01', '√Ålava'),
    ('02', 'Albacete'),
    ('03', 'Alicante'),
    ('04', 'Almer√≠a'),
    ('05', 'Asturias'),
    ('06', '√Åvila'),
    ('07', 'Badajoz'),
    ('08', 'Barcelona'),
    ('09', 'Burgos'),
    ('10', 'C√°ceres'),
    ('11', 'C√°diz'),
    ('12', 'Cantabria'),
    ('13', 'Castell√≥n'),
    ('14', 'Ciudad Real'),
    ('15', 'C√≥rdoba'),
    ('16', 'Cuenca'),
    ('17', 'Girona'),
    ('18', 'Granada'),
    ('19', 'Guadalajara'),
    ('20', 'Guip√∫zcoa'),
    ('21', 'Huesca'),
    ('22', 'Ja√©n'),
    ('23', 'La Coru√±a'),
    ('24', 'La Rioja'),
    ('25', 'Las Palmas'),
    ('26', 'Le√≥n'),
    ('27', 'Lleida'),
    ('28', 'Lugo'),
    ('29', 'Madrid'),
    ('30', 'M√°laga'),
    ('31', 'Murcia'),
    ('32', 'Navarra'),
    ('33', 'Ourense'),
    ('34', 'Palencia'),
    ('35', 'Palma de Mallorca'),
    ('36', 'Pamplona'),
    ('37', 'Pontevedra'),
    ('38', 'Salamanca'),
    ('39', 'Segovia'),
    ('40', 'Sevilla'),
    ('41', 'Soria'),
    ('42', 'Tarragona'),
    ('43', 'Teruel'),
    ('44', 'Toledo'),
    ('45', 'Valencia'),
    ('46', 'Valladolid'),
    ('47', 'Vizcaya'),
    ('48', 'Zamora'),
    ('49', 'Zaragoza'),
]


class Command(BaseCommand):
    help = 'Genera todas las provincias espa√±olas en la base de datos'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limpiar',
            action='store_true',
            help='Elimina todas las provincias antes de generar nuevas'
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('=' * 70)
        )
        self.stdout.write(
            self.style.SUCCESS('üó∫Ô∏è  GENERANDO PROVINCIAS ESPA√ëOLAS')
        )
        self.stdout.write(
            self.style.SUCCESS('=' * 70)
        )

        # Si --limpiar est√° activo
        if options.get('limpiar'):
            self.stdout.write(
                self.style.WARNING('\nüóëÔ∏è  Limpiando provincias anteriores...')
            )
            cantidad_eliminada, _ = Provincia.objects.all().delete()
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {cantidad_eliminada} provincias eliminadas')
            )

        # Generar provincias
        self._generar_provincias()

        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ Generaci√≥n completada')
        )
        self.stdout.write(
            self.style.SUCCESS('=' * 70)
        )

    def _generar_provincias(self):
        """Genera todas las provincias espa√±olas"""
        self.stdout.write(
            self.style.WARNING('\nüìç Generando provincias de Espa√±a...')
        )

        contador_creadas = 0
        contador_existentes = 0

        for codigo, nombre in PROVINCIAS_ESPA√ëA:
            try:
                provincia, creada = Provincia.objects.get_or_create(
                    codigo=codigo,
                    defaults={'nombre': nombre}
                )

                if creada:
                    self.stdout.write(
                        f'‚úîÔ∏è  Creada: {nombre} (c√≥digo: {codigo})'
                    )
                    contador_creadas += 1
                else:
                    self.stdout.write(
                        f'‚ÑπÔ∏è  Existente: {nombre} (c√≥digo: {codigo})'
                    )
                    contador_existentes += 1

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå Error con {nombre}: {str(e)}')
                )

        total = contador_creadas + contador_existentes
        self.stdout.write(
            self.style.SUCCESS(f'\n‚úÖ Provincias procesadas: {total}')
        )
        self.stdout.write(
            self.style.SUCCESS(f'   ‚Ä¢ Nuevas: {contador_creadas}')
        )
        self.stdout.write(
            self.style.SUCCESS(f'   ‚Ä¢ Existentes: {contador_existentes}')
        )
