services:
  # Base de datos PostgreSQL con pgvector
  db:
    image: ankane/pgvector:latest
    container_name: dealaai_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: dealaai_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - dealaai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache y Celery
  redis:
    image: redis:7-alpine
    container_name: dealaai_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dealaai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: dealaai_backend
    restart: unless-stopped
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
      - backend_media:/app/media
      - backend_static:/app/staticfiles
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealaai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: dealaai_frontend
    restart: unless-stopped
    command: npm run dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.local
    depends_on:
      - backend
    networks:
      - dealaai_network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker (para tareas as√≠ncronas)
  celery_worker:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: dealaai_celery_worker
    restart: unless-stopped
    command: celery -A dealaai worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealaai_network

  # Celery Beat (para tareas programadas)
  celery_beat:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: dealaai_celery_beat
    restart: unless-stopped
    command: celery -A dealaai beat -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealaai_network

  # Nginx (reverse proxy - opcional para desarrollo)
  # nginx:
  #   image: nginx:alpine
  #   container_name: dealaai_nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./docker/nginx/ssl:/etc/nginx/ssl
  #     - backend_static:/var/www/static
  #     - backend_media:/var/www/media
  #   depends_on:
  #     - backend
  #     - frontend
  #   networks:
  #     - dealaai_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_media:
    driver: local
  backend_static:
    driver: local

networks:
  dealaai_network:
    driver: bridge
