# Docker Compose para Producción - EasyPanel
# Configuración optimizada para deployment en EasyPanel con Nginx reverse proxy

version: "3.8"

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: dealaai_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      - backend_static:/var/www/static:ro
      - backend_media:/var/www/media:ro
      # SSL certificates (configurar en EasyPanel)
      # - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - dealaai_network
    environment:
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile.prod
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_URL=https://mcp.jorgemg.es/api/v1
        - NEXT_PUBLIC_WS_URL=wss://mcp.jorgemg.es/ws
    container_name: dealaai_frontend_prod
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://mcp.jorgemg.es/api/v1
      - NEXT_PUBLIC_WS_URL=wss://mcp.jorgemg.es/ws
      - NEXT_PUBLIC_DOMAIN=mcp.jorgemg.es
    depends_on:
      - backend
    networks:
      - dealaai_network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile.prod
      args:
        - DJANGO_SETTINGS_MODULE=dealaai.settings.production
    container_name: dealaai_backend_prod
    restart: unless-stopped
    expose:
      - "8000"
    volumes:
      - backend_media:/app/media
      - backend_static:/app/staticfiles
      - backend_logs:/app/logs
    environment:
      - DJANGO_SETTINGS_MODULE=dealaai.settings.production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/dealaai_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALLOWED_HOSTS=mcp.jorgemg.es,backend
      - CORS_ALLOWED_ORIGINS=https://mcp.jorgemg.es
      - DEBUG=False
      - SECURE_SSL_REDIRECT=True
      - SESSION_COOKIE_SECURE=True
      - CSRF_COOKIE_SECURE=True
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealaai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL con pgvector
  db:
    image: ankane/pgvector:v0.5.1
    container_name: dealaai_db_prod
    restart: unless-stopped
    expose:
      - "5432"
    environment:
      POSTGRES_DB: dealaai_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - postgres_backups:/backups
    networks:
      - dealaai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dealaai_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis para cache y Celery
  redis:
    image: redis:7.2-alpine
    container_name: dealaai_redis_prod
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - dealaai_network
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Celery Worker para tareas asíncronas
  celery_worker:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile.prod
    container_name: dealaai_celery_worker_prod
    restart: unless-stopped
    command: celery -A dealaai worker -l info --concurrency=2
    volumes:
      - backend_media:/app/media
      - backend_logs:/app/logs
    environment:
      - DJANGO_SETTINGS_MODULE=dealaai.settings.production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/dealaai_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealaai_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Celery Beat para tareas programadas
  celery_beat:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile.prod
    container_name: dealaai_celery_beat_prod
    restart: unless-stopped
    command: celery -A dealaai beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - backend_logs:/app/logs
    environment:
      - DJANGO_SETTINGS_MODULE=dealaai.settings.production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/dealaai_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dealaai_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # pgAdmin - Cliente web de PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dealaai_pgadmin_prod
    restart: unless-stopped
    expose:
      - "80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@mcp.jorgemg.es
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "True"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      SCRIPT_NAME: /pgadmin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - db
    networks:
      - dealaai_network

  # Supabase Auth (GoTrue) - Opcional si usas autenticación externa
  supabase_auth:
    image: supabase/gotrue:v2.99.0
    container_name: dealaai_supabase_auth_prod
    restart: unless-stopped
    expose:
      - "9999"
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@db:5432/dealaai_prod
      GOTRUE_SITE_URL: https://mcp.jorgemg.es
      GOTRUE_URI_ALLOW_LIST: https://mcp.jorgemg.es
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_EXTERNAL_GOOGLE_ENABLED: "true"
      GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOTRUE_EXTERNAL_GOOGLE_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI: https://mcp.jorgemg.es/auth/v1/callback
    depends_on:
      - db
    networks:
      - dealaai_network

  # Supabase Studio - Panel oficial (opcional)
  supabase_studio:
    image: supabase/studio:latest
    container_name: dealaai_supabase_studio_prod
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      STUDIO_PG_META_URL: http://db:5432
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      SUPABASE_URL: https://mcp.jorgemg.es
      SUPABASE_REST_URL: https://mcp.jorgemg.es/api/v1
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
    depends_on:
      - db
    networks:
      - dealaai_network

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: dealaai_prometheus_prod
    restart: unless-stopped
    expose:
      - "9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - dealaai_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_media:
    driver: local
  backend_static:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  pgadmin_data:
    driver: local
  postgres_backups:
    driver: local
  prometheus_data:
    driver: local

networks:
  dealaai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Configuración de logging centralizado
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
