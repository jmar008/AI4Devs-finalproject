# Docker Compose para Producción - EasyPanel (SIMPLIFICADO)
# Configuración minimalista para MVP - Solo servicios esenciales
services:
  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile.prod
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_URL=https://mcp.jorgemg.es/api/v1
        - NEXT_PUBLIC_WS_URL=wss://mcp.jorgemg.es/ws
    container_name: dealaai_frontend_prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://mcp.jorgemg.es/api/v1
      - NEXT_PUBLIC_WS_URL=wss://mcp.jorgemg.es/ws
      - NEXT_PUBLIC_DOMAIN=mcp.jorgemg.es
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Django
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile.prod
      args:
        - DJANGO_SETTINGS_MODULE=dealaai.settings.production
    container_name: dealaai_backend_prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - backend_media:/app/media
      - backend_static:/app/staticfiles
      - backend_logs:/app/logs
    environment:
      - DJANGO_SETTINGS_MODULE=dealaai.settings.production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/dealaai_prod
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ALLOWED_HOSTS=mcp.jorgemg.es,backend,localhost,127.0.0.1
      - CORS_ALLOWED_ORIGINS=https://mcp.jorgemg.es
      - DEBUG=False
      - USE_CELERY=false
      - USE_REDIS=false
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL con pgvector
  db:
    image: ankane/pgvector:v0.5.1
    container_name: dealaai_db_prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: dealaai_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dealaai_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin - Cliente web de PostgreSQL (Opcional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dealaai_pgadmin_prod
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@mcp.jorgemg.es
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "True"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db

volumes:
  postgres_data:
    driver: local
  backend_media:
    driver: local
  backend_static:
    driver: local
  backend_logs:
    driver: local
  pgadmin_data:
    driver: local
